use std::{collections::HashMap, process::Command};

use clap::Parser;
use simple_completion_language_server::*;
use snippets::Snippet;

macro_rules! create_snippet_map {
    ($($k:expr => $v:expr),*) => {{
        let mut v = vec![];
        $(
            v.push(Snippet {
                scope: None,
                prefix: $k.to_string(),
                description: Some($v.to_string().clone()),
                body: value,
            });
        )*
        v
    }};
}

fn get_prefix(s: &str) -> Option<String> {
    let s = s.replace("LATIN ", "");
    let s = s.replace("BALINESE ", "");
    let s = s.replace("GREEK ", "");
    let s = s.replace("TAI THAM HORA ", "");
    let s = s.replace("THAM COMBINING CRYPTOGRAMMIC ", "");
    let s = s.replace("TAI THAM SIGN ", "");
    let s = s.replace("TAI THAM VOWEL ", "");
    let s = s.replace(" ", "-");
    if s == "<control>" {
        return None;
    }

    Some(s)
}

#[derive(Parser)]
#[clap(version, long_about = None, about = "Unicode language server")]
struct Cli {
    #[arg(short, long)]
    include_all_symbols: bool,
}

#[tokio::main]
async fn main() {
    let cli = Cli::parse();
    let stdin = tokio::io::stdin();
    let stdout = tokio::io::stdout();

    let mut snippets = create_snippet_map! {
        "Rightarrow" => '‚áí',
        "=>" => '‚áí',
        "rightarrow" => '‚Üí',
        "->" => '‚Üí',
        "supset" => '‚äÉ',
        "Leftrightarrow" => '‚áî',
        "<=>" => '‚áî',
        "leftarrowarrow" => '‚Üî',
        "<->" => '‚Üî',
        "equiv" => '‚â°',
        "=" => '‚â°',
        "lnot" => '¬¨',
        "neg" => '¬¨',
        "!=" => '¬¨',
        "=" => 'Ôºù',
        "->" => "‚á®",
        "_0" => '‚ÇÄ',
        "_1" => '‚ÇÅ',
        "_2" => "‚ÇÇ",
        "|>" => "‚ñ∏",
        "<-" => '‚Üê',
        "<=" => '‚áê',
        "^-1" => "‚Åª¬π",
        "~~~" => '‚âã',
        "<|" => '‚óÇ',
        "2" => 'ùüö',
        "^e" => '·µâ',
        "*" => '‚òÖ',
        "wedge" => '‚àß',
        "^" => '‚àß',
        "land" => '‚àß',
        "*" => '¬∑',
        "*" => '¬∫',
        "1/2" => '¬Ω',
        "1/4" => '¬º',
        "3/4" => '¬æ',
        "x" => '√ó',
        "*" => '√ó',
        "o" => '√ò',
        "empty" => '√ò',
        "div" => '√∑',
        "/" => '√∑',
        "E" => '∆ê',
        "f" => '∆í',
        "w" => '∆ú',
        "lambda" => '∆õ',
        "o" => '∆ü',
        "T" => '∆¨',
        "Y" => '∆±',
        "V" => '∆≤',
        "Z" => '∆µ',
        "z" => '∆∂',
        "3" => '∆∑',
        "E" => '∆∏',
        "e" => '∆π',
        "3" => '∆∫',
        "|=" => '«Ç',
        ":" => '‚¶Ç',
        "N" => '‚Ñï',
        "C" => '‚ÑÇ',
        "delta" => 'Œî',
        "contains" => '‚àã',
        "not contains" => '‚àå',
        "superset" => '‚äÉ',
        "superset or equal" => '‚äá',
        "union" => '‚à™',
        "not element of" => '‚àâ',
        "element of" => '‚àà',
        "subset" => '‚äÇ',
        "subset or equal" => '‚äÜ',
        "there does not exists" => '‚àÑ',
        "intersection" => '‚à©',
        "intersect" => '‚à©',
        "!3" => '‚àå',
        "Q" => '‚Ñö',
        "Z" => '‚Ñ§',
        "R" => '‚Ñù',
        ";" => '‚®æ',
        "|->" => '‚Ü¶',
        ">>" => '¬ª',
        "cdot" => '¬∑',
        "v" => '‚à®',
        "f" => '‚à´',
        "f-" => '‚àÆ',
        "ff" => '‚à¨',
        "(" => '‚ü®',
        ")" => '‚ü©',
        "monad" => '‚äô',
        "lor" => '‚à®',
        "vee" => '‚à®',
        "||" => '‚à•',
        "parallel" => '‚à•',
        "oplus" => '‚äï',
        "veebar" => '‚äª',
        "notequiv" => '‚â¢',
        "!=" => '‚â¢',
        "top" => '‚ä§',
        "T" => '‚ä§',
        "bot" => '‚ä•',
        "forall" => '‚àÄ',
        "A" => '‚àÄ',
        "E" => '‚àÉ',
        "exists" => '‚àÉ',
        "vdash" => '‚ä¢',
        "turnstile" => '‚ä¢',
        "|-" => '‚ä¢',
        "vDash" => '‚ä®',
        "|=" => '‚ä®',
        "Leftrightarrow" => '‚áî',
        "nvdash" => '‚ä¨',
        "nvDash" => '‚ä≠',
        "Box" => '‚ñ°',
        "Diamond" => '‚óá',
        "therefore" => '‚à¥',
        "because" => '‚àµ',
        ":=" => '‚âî',
        "alpha" => 'Œ±',
        "a" => 'Œ±',
        "beta" => 'Œ≤',
        "b" => 'Œ≤',
        "B" => 'Œ≤',
        "y" => 'Œ≥',
        "Y" => 'Œ≥',
        "gamma" => 'Œ≥',
        "Gamma" => 'Œì',
        "delta" => 'Œ¥',
        "Delta" => 'Œî',
        "epsilon" => 'Œ¥',
        "zeta" => 'Œ∂',
        "eta" => 'Œ∑',
        "n" => 'Œ∑',
        "theta" => 'Œ∏',
        "Theta" => 'Œò',
        "iota" => 'Œπ',
        "kappa" => 'Œ∫',
        "k" => 'Œ∫',
        "\\" => 'Œª',
        "lambda" => 'Œª',
        "Lambda" => 'Œõ',
        "^" => 'Œõ',
        "mu" => 'Œº',
        "u" => 'Œº',
        "E" => 'Œæ',
        "xi" => 'Œæ',
        "===" => 'Œû',
        "Xi" => 'Œû',
        "pi" => 'œÄ',
        "Pi" => 'Œ†',
        "rho" => 'œÅ',
        "sigma" => 'œÉ',
        "Sigma" => 'Œ£',
        "tau" => 'œÑ',
        "t" => 'œÑ',
        "upsilon" => 'œÖ',
        "u" => 'œÖ',
        "phi" => 'œÜ',
        "Phi" => 'Œ¶',
        "chi" => 'œá',
        "x" => 'œá',
        "psi" => 'œà',
        "Psi" => 'Œ®',
        "omega" => 'œâ',
        "Omega" => 'Œ©',
        "^~~" => " Õå",
        "^*/*" => " Õã",
        "^!~" => " Õä",
        "_=" => " Õá",
        "^=" => " Ãø",
        "^x" => " ÃΩ",
        "^*" => " ÃΩ",
        "_-" => " Ã≤",
        "_T" => " Ãû",
        "_+" => " Ãü",
        "_bot" => " Ãû",
        "_|-" => " Ãô",
        "^o" => " Ãä"
    };

    dbg!(cli.include_all_symbols);

    if cli.include_all_symbols {
        for line in include_str!("data.txt").split("\n") {
            if line.is_empty() {
                continue;
            }
            let line = line.split(";").collect::<Vec<_>>();
            let [c, alias, ..] = line.as_slice() else {
                continue;
            };

            let Ok(c) = u32::from_str_radix(c, 16) else {
                continue;
            };

            let Ok(c) = char::try_from(c) else {
                continue;
            };

            let alias = alias.to_lowercase();
            let Some(prefix) = get_prefix(&alias) else {
                continue;
            };

            snippets.push(Snippet {
                scope: None,
                prefix,
                description: Some(format!("{c}")),
                body: format!("{c}"),
            });
        }
    }

    server::start(
        stdin,
        stdout,
        snippets
            .into_iter()
            .filter(|s| {
                !s.body.is_empty()
                    && match &s.description {
                        Some(s) => !s.is_empty(),
                        None => false,
                    }
            })
            .collect(),
        HashMap::new(),
        etcetera::home_dir().unwrap().to_str().unwrap().into(),
    )
    .await;
}
